<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cpo=1;
cpox[0]=x;
cpoy[0]=y;
alarm[0]=room_speed*global.lazor_life;
fix1=physics_fixture_create();
physics_fixture_set_circle_shape(fix1,global.lazor_radius);
physics_fixture_set_friction(fix1,0);
physics_fixture_set_density(fix1,0.5);
physics_fixture_set_linear_damping(fix1,0);
physics_fixture_set_restitution(fix1,1);
physics_fixture_set_collision_group(fix1,0);
physics_fixture_bind(fix1,id);
phy_fixed_rotation=1;
phy_bullet=1;
has_init=1;
solved_col=0;
checkn=0;
checkm=0;
sii=c_red;
no_score=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(ign))
{
ign.block_fire=0;
ign.stuck=0;
ign.weapon_current=0;
}

if(!sp)//remove object
{
script_execute(net_write_data,6,v_client,id);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(solved_col)
{
iddx=noone;
iddx=collision_circle(x,y,global.lazor_radius,control,true,true);
if(iddx!=noone)
{
if(instance_exists(iddx))with(iddx)instance_destroy();
if(no_score==0)
{
if(iddx==ign)score2[sid]+=global.suicide_score_modif;
else {if(instance_exists(ign))score2[sid]++;else score2[sid]+=global.score_dead;}
}
instance_destroy();
}
}

if(solved_col==0)
{
checkn=x+phy_speed_x/phy_speed*global.chkdist*global.lazor_radius;
checkm=y+phy_speed_y/phy_speed*global.chkdist*global.lazor_radius;
if(!instance_exists(ign))
{
solved_col=1;
fix1=physics_fixture_create();
physics_fixture_set_circle_shape(fix1,global.lazor_radius);
physics_fixture_set_friction(fix1,0);
physics_fixture_set_density(fix1,5000);
physics_fixture_set_linear_damping(fix1,0);
physics_fixture_set_restitution(fix1,1);
physics_fixture_set_collision_group(fix1,0);
physics_fixture_bind(fix1,id);
phy_fixed_rotation=1;
phy_bullet=1;
}
else if((physics_test_overlap(x,y,0,ign)==false || physics_test_overlap(checkn,checkm,0,obj_wall)==true))
{
solved_col=1;
fix1=physics_fixture_create();
physics_fixture_set_circle_shape(fix1,global.lazor_radius);
physics_fixture_set_friction(fix1,0);
physics_fixture_set_density(fix1,5000);
physics_fixture_set_linear_damping(fix1,0);
physics_fixture_set_restitution(fix1,1);
physics_fixture_set_collision_group(fix1,0);
physics_fixture_bind(fix1,id);
phy_fixed_rotation=1;
phy_bullet=1;
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cpox[cpo]=phy_collision_x[0];
cpoy[cpo]=phy_collision_y[0];
cpo++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
//draw_circle(x,y,global.lazor_radius,false);
//draw_circle(checkn,checkm,global.projectile0_radius/2,false);
for(f=1;f&lt;cpo;f++)draw_line_width_colour(cpox[f-1],cpoy[f-1],cpox[f],cpoy[f],global.lazor_radius,sii,sii);
draw_line_width_colour(cpox[cpo-1],cpoy[cpo-1],phy_position_x,phy_position_y,global.lazor_radius,sii,sii);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,0</point>
  </PhysicsShapePoints>
</object>
