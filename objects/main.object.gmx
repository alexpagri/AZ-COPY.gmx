<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.grid=mp_grid_create(-grid_density/2,-grid_density/2,global.i_1_scr/grid_density+1,global.i_2_scr/grid_density+1,grid_density,grid_density);

globalvar dmode;

dmode=0;

dmo=0;


for(i=0;i&lt;=n;i++)for(j=0;j&lt;=m;j++)
{
if(grid_walls[i,j]==2)
{
ins=instance_create(blocksize*i,blocksize*j,obj_wall);
//ins.phy_rotation=0;
ins.ht=wall_width;
ins.wd=wall_length;
with(ins)event_user(0);
mp_grid_add_instances(global.grid,ins,false);
}
if(grid_walls[i,j]==3)
{
ins=instance_create(blocksize*i,blocksize*j,obj_wall);
//ins.phy_rotation=0;
ins.wd=wall_width;
ins.ht=wall_length;
with(ins)event_user(0);
mp_grid_add_instances(global.grid,ins,false);
}
}



globalvar grid_n;
globalvar grid_m;

grid_n=global.i_1_scr/grid_density;
grid_m=global.i_2_scr/grid_density;


p=0;

while(p==0)
{
loc_n=irandom_range(1,grid_n+1);
loc_m=irandom_range(1,grid_m-1);
if(mp_grid_get_cell(global.grid,loc_n,loc_m)!=-1)
{
p=1;
pr6=instance_create(loc_n*grid_density,loc_m*grid_density,control);
pr6.sii=c_red;
pr7=instance_create(0,0,score);
pr6.sid=pr7;
pr7.sii=c_red;
pr7.ign=pr6;
pr7.sid=0;
}
}

virpath=path_add();

globalvar totblocks;

totblocks=(grid_n-1)*(grid_m-1);

for(i=0;i&lt;=grid_n;i++)
{
grid_matrix[i,0]=0;
grid_matrix[i,grid_m]=0;
}
for(j=0;j&lt;=grid_m;j++)
{
grid_matrix[0,j]=0;
grid_matrix[grid_n,j]=0;
}



for(i=1;i&lt;grid_n;i++)for(j=1;j&lt;grid_m;j++)
{
    if (mp_grid_get_cell(global.grid,i,j)!=-1)
    {
        if (mp_grid_path(global.grid,virpath,i*grid_density,j*grid_density,loc_n*grid_density,loc_m*grid_density,false)==false)
        {
        mp_grid_add_cell(global.grid,i,j);
        totblocks--;
        grid_matrix[i,j]=0;
        }
        else
        {
        grid_matrix[i,j]=1;
        }
    }
    else
    {
    totblocks--;
    grid_matrix[i,j]=0;
    }
}
/*

ui=0;
uj=0;


for(i=1;i&lt;grid_n;i++)
{
    oki=0;
    for(j=1;j&lt;grid_m;j++)
    {
        if(grid_matrix[i,j]==1)
        {
        oki=1;
        }
        
    }
    if(oki)ui++;
}
for(i=1;i&lt;grid_m;i++)
{
    oki=0;
    for(j=1;j&lt;grid_n;j++)
    {
        if(grid_matrix[j,i]==1)
        {
        oki=1;
        }
        
    }
    if(oki)uj++;
}
okci=irandom(ui)-1;
okcj=irandom(uj)-1;
for(i=1;i&lt;grid_n;i++)
{
    oki=0;
    for(j=1;j&lt;grid_m;j++)
    {
        if(grid_matrix[i,j]==1)
        {
        oki=1;
        }
        
    }
    if(oki)okci--;
    if(okci==0)colx=i;
}
for(i=1;i&lt;grid_m;i++)
{
    oki=0;
    for(j=1;j&lt;grid_n;j++)
    {
        if(grid_matrix[j,i]==1)
        {
        oki=1;
        }
        
    }
    if(oki)okcj--;
    if(okcj==0)coly=i;
}
oki=0;
for(i=1;i&lt;grid_m;i++)
{
    
    for(j=1;j&lt;grid_n;j++)
    {
        if(grid_matrix[j,i]==1)
        {
        if(oki==0)
        {
        
        }
        oki=1;
        }
        
    }
    
}
*/
globalvar bonus_matrix;

fil1=file_text_open_write("intrare.txt");
file_text_write_real(fil1,grid_m-1);
file_text_writeln(fil1);
file_text_write_real(fil1,grid_n-1);
file_text_writeln(fil1);
file_text_write_real(fil1,totblocks);
for(i=1;i&lt;grid_m;i++)
{
    file_text_writeln(fil1);
    for(j=1;j&lt;grid_n;j++)
    {
        if(grid_matrix[j,i]==1)
        {
        file_text_write_real(fil1,1);
        }
        else file_text_write_real(fil1,0);
        
    }
    
}

file_text_close(fil1);



rand_calc("\\AZ_COPY\\intrare.txt", "\\AZ_COPY\\iesire.txt");


fil1=file_text_open_read("iesire.txt");
t2x=file_text_read_real(fil1);
t2y=file_text_read_real(fil1);
file_text_close(fil1);

pr6=instance_create(t2y*grid_density,t2x*grid_density,control);
        with(pr6)
        {
        key_up=vk_up;
        key_left=vk_left;
        key_down=vk_down;
        key_right=vk_right;
        key_fire=ord('M');
        sii=c_lime;
        }
pr7=instance_create(0,0,score);
pr6.sid=pr7;
pr7.sii=c_lime;
pr7.ign=pr6;
pr7.sid=1;
        
        
for(i=1;i&lt;grid_m;i++)
{
    for(j=1;j&lt;grid_n;j++)
    {
        bonus_matrix[j,i]=grid_matrix[j,i];
    }
    
}

alarm[0]=room_speed*global.bonus_spawn;
totblocks_bonus=totblocks;
bonus_count=global.bonus_maximum;
        

        






room_persistent=1;
if(totblocks&lt;minblocks)script_execute(new_map);

else script_execute(stepa_init);



background_colour=global.bgcolor;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(new_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(totblocks_bonus&gt;0 &amp;&amp; bonus_count&gt;0)
{
fil1=file_text_open_write("intrare.txt");
file_text_write_real(fil1,grid_m-1);
file_text_writeln(fil1);
file_text_write_real(fil1,grid_n-1);
file_text_writeln(fil1);
file_text_write_real(fil1,totblocks_bonus);
for(i=1;i&lt;grid_m;i++)
{
    file_text_writeln(fil1);
    for(j=1;j&lt;grid_n;j++)
    {
        if(bonus_matrix[j,i]==1)
        {
        file_text_write_real(fil1,1);
        }
        else file_text_write_real(fil1,0);
        
    }
    
}

file_text_close(fil1);


rand_calc("\\AZ_COPY\\intrare.txt", "\\AZ_COPY\\iesire.txt");


fil1=file_text_open_read("iesire.txt");
bx=file_text_read_real(fil1);
by=file_text_read_real(fil1);
file_text_close(fil1);

distxobj=instance_nearest(by*grid_density,bx*grid_density,control);

if(instance_exists(control))
{
with(distxobj)other.dist1=distance_to_point(other.by*grid_density,other.bx*grid_density);
if(dist1&gt;global.bonus_mindist)
{

pr7=instance_create(by*grid_density,bx*grid_density,bonus);
pr7.by=by;
pr7.bx=bx;

bonus_matrix[by,bx]=0;
totblocks_bonus--;
bonus_count--;
}
}
}
alarm[0]=room_speed*global.bonus_spawn;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord('G')))
{
if (dmode==0)
{
dmode=1;
}
else dmode=0;
}


if(dmode!=dmo)
{
if(dmode)show_debug_overlay(true);
else show_debug_overlay(false);
}
dmo=dmode;

/*if(mouse_check_button_pressed(mb_left))
{
instance_create(mouse_x,mouse_y,bonus);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
draw_set_colour(c_red);
draw_text(10,10,string(score2[0]));
draw_set_colour(c_black);
draw_text(40,10,"-");
draw_set_colour(c_lime);
draw_text(70,10,string(score2[1]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dmode)
{
draw_set_alpha(0.4);
mp_grid_draw(global.grid);
draw_set_alpha(1);
flag = phy_debug_render_coms | phy_debug_render_shapes ;
physics_world_draw_debug(flag);
draw_text(20,20,string(fps));
draw_text(20,40,string(fps_real));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(new_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
