<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>tw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>forces=30;
sii=c_white;
back_forces=forces/2;
ang_forces=20;
phy_bullet=0;
block_fire=0;
this_spinup=0;
has_moved=0;
cr_l_helper=noone;
prevx=0;
prevy=0;
prevrot=0;
stuck=0;
lazor_helper_clear=1;
pr2=noone;
pr1=noone;

//replaceable
key_up=ord('E');
key_left=ord('S');
key_down=ord('D');
key_right=ord('F');
key_fire=ord('Q');


// 0 default ball(projectile0)
// 1 (minigun_balls1)
// 2 (rocket2)
// 3 (lazor3)
weapon_current=2;
lazor_helper=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(cr_l_helper))with(cr_l_helper)instance_destroy();
if(instance_exists(pr1))with(pr1)instance_destroy();
if(instance_exists(pr2))with(pr2)instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_current=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(key_up) &amp;&amp; stuck==0)
{
physics_apply_impulse(phy_com_x,phy_com_y,forces*cos(phy_rotation*pi/180),forces*sin(phy_rotation*pi/180));
}
if(keyboard_check(key_left) &amp;&amp; stuck==0)
{
physics_apply_angular_impulse(-ang_forces);
}
if(keyboard_check(key_down) &amp;&amp; stuck==0)
{
physics_apply_impulse(phy_com_x,phy_com_y,-back_forces*cos(phy_rotation*pi/180),-back_forces*sin(phy_rotation*pi/180));
}
if(keyboard_check(key_right) &amp;&amp; stuck==0)
{
physics_apply_angular_impulse(ang_forces);
}


if(keyboard_check_pressed(ord('0')))
{
weapon_current=0;
}
if(keyboard_check_pressed(ord('1')))
{
weapon_current=1;
}
if(keyboard_check_pressed(ord('2')))
{
weapon_current=2;
}
if(keyboard_check_pressed(ord('3')))
{
weapon_current=3;
}



if(grid_matrix[(phy_position_x+grid_density/2) div grid_density,(phy_position_y+grid_density/2) div grid_density]==1)
{
global.gron=1;
}
else global.gron=0;

if(keyboard_check_pressed(ord('L')))
{
if (lazor_helper==0)
{
if(weapon_current==3)lazor_helper=1;
}
else
{
lazor_helper=0;
if(instance_exists(cr_l_helper))with(cr_l_helper)instance_destroy();
if(instance_exists(pr1))with(pr1)instance_destroy();
if(instance_exists(pr2))with(pr2)instance_destroy();
}
}


if(weapon_current!=3 &amp;&amp; lazor_helper)
{
lazor_helper=0;
if(instance_exists(cr_l_helper))with(cr_l_helper)instance_destroy();
if(instance_exists(pr1))with(pr1)instance_destroy();
if(instance_exists(pr2))with(pr2)instance_destroy();
}


if(phy_position_x!=prevx || phy_position_y!=prevy || prevrot!=phy_rotation)
{
has_moved=1;
}



if(this_spinup&gt;0)this_spinup-=1/room_speed;
if(this_spinup&gt;global.minigun_balls1_spinup_time)this_spinup=global.minigun_balls1_spinup_time;

if(lazor_helper)
{
    if(has_moved &amp;&amp; alarm[1]&lt;0)if(instance_exists(cr_l_helper))if(cr_l_helper.hend)
    {
    if(instance_exists(pr2))with(pr2)instance_destroy();
    pr1=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.lazor_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.lazor_radius/2,lazor_help);
    has_moved=0;
    //with(pr1)physics_apply_impulse(phy_com_x,phy_com_y,global.lazor_help_speed*cos(other.phy_rotation*pi/180),global.lazor_help_speed*sin(other.phy_rotation*pi/180));
    pr1.ign=id;
    pr1.rotx=phy_rotation;
    if(instance_exists(cr_l_helper))cr_l_helper.disp=1;
    pr2=cr_l_helper;
    cr_l_helper=pr1;
    alarm[1]=global.lazor_help_speed;
    }
    if(has_moved &amp;&amp; alarm[1]&lt;0)if(!instance_exists(cr_l_helper))
    {
    if(instance_exists(pr2))with(pr2)instance_destroy();
    pr1=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.lazor_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.lazor_radius/2,lazor_help);
    has_moved=0;
    //with(pr1)physics_apply_impulse(phy_com_x,phy_com_y,global.lazor_help_speed*cos(other.phy_rotation*pi/180),global.lazor_help_speed*sin(other.phy_rotation*pi/180));
    pr1.ign=id;
    pr1.rotx=phy_rotation;
    if(instance_exists(cr_l_helper))cr_l_helper.disp=1;
    pr2=cr_l_helper;
    cr_l_helper=pr1;
    alarm[1]=global.lazor_help_speed;
    }
    if(instance_exists(pr1))if(pr1.hend)
    {
    pr1.disp=1;
    if(instance_exists(cr_l_helper))cr_l_helper.disp=0;
    //has_moved=0;
    }
}





if(keyboard_check(key_fire) &amp;&amp; block_fire==0)
{
if(weapon_current==0)
    {
    pr5=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.projectile0_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.projectile0_radius/2,projectile0);
    with(pr5)physics_apply_impulse(phy_com_x,phy_com_y,global.projectile0_speed*cos(other.phy_rotation*pi/180),global.projectile0_speed*sin(other.phy_rotation*pi/180));
    pr5.ign=id;
    block_fire=1;
    }
else if(weapon_current==1)
    {
    this_spinup+=2/room_speed;
        if(this_spinup&gt;=global.minigun_balls1_spinup_time)
        {
        pr5=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.minigun_balls1_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.minigun_balls1_radius/2,minigun_balls1);
        with(pr5)physics_apply_impulse(phy_com_x,phy_com_y,global.minigun_balls1_speed*cos((random_range(-global.minigun_balls1_deviation,global.minigun_balls1_deviation)+other.phy_rotation)*pi/180),global.minigun_balls1_speed*sin((random_range(-global.minigun_balls1_deviation,global.minigun_balls1_deviation)+other.phy_rotation)*pi/180));
        pr5.ign=id;
        this_spinup-=1/global.minigun_balls1_firerate;
        }
    }
else if(weapon_current==2)
    {
    pr5=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180),phy_position_y+global.sdist*sin(phy_rotation*pi/180),rocket2);
    with(pr5)physics_apply_impulse(phy_com_x,phy_com_y,global.rocket2_speed*cos(other.phy_rotation*pi/180),global.rocket2_speed*sin(other.phy_rotation*pi/180));
    pr5.ign=id;
    pr5.sii=sii;
    block_fire=1;
    }
else if(weapon_current==3)
    {
    pr5=instance_create(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.lazor_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.lazor_radius/2,lazor);
    with(pr5)physics_apply_impulse(phy_com_x,phy_com_y,global.lazor_speed*cos(other.phy_rotation*pi/180),global.lazor_speed*sin(other.phy_rotation*pi/180));
    pr5.ign=id;
    pr5.sii=sii;
    block_fire=1;
    stuck=1;
    }
}
prevx=phy_position_x;
prevy=phy_position_y;
prevrot=phy_rotation;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(tw,0,phy_position_x,phy_position_y,1,1,-phy_rotation,sii,255);

if(dmode)
{
draw_circle(phy_position_x+global.sdist*cos(phy_rotation*pi/180)+1-global.projectile0_radius/2,phy_position_y+global.sdist*sin(phy_rotation*pi/180)+1-global.projectile0_radius/2,global.projectile0_radius,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>50</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>50</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>30,0</point>
    <point>36,8</point>
    <point>36,16</point>
    <point>30,24</point>
    <point>0,24</point>
  </PhysicsShapePoints>
</object>
