<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>calc=0;
bid=irandom(3)+1;

fix1=physics_fixture_create();
physics_fixture_set_circle_shape(fix1,2);
physics_fixture_set_friction(fix1,0);
physics_fixture_set_kinematic(fix1);
physics_fixture_set_density(fix1,0);
physics_fixture_set_linear_damping(fix1,0);
physics_fixture_set_angular_damping(fix1,0);
physics_fixture_set_restitution(fix1,1);
physics_fixture_set_collision_group(fix1,0);
physics_fixture_bind(fix1,id);

fix_col=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(calc==0)
{
x1=phy_position_x+global.bonus_radius*cos((phy_rotation+45)*pi/180);
y1=phy_position_y+global.bonus_radius*sin((phy_rotation+45)*pi/180);
x2=phy_position_x+global.bonus_radius*cos((phy_rotation+135)*pi/180);
y2=phy_position_y+global.bonus_radius*sin((phy_rotation+135)*pi/180);
x3=phy_position_x+global.bonus_radius*cos((phy_rotation+225)*pi/180);
y3=phy_position_y+global.bonus_radius*sin((phy_rotation+225)*pi/180);
x4=phy_position_x+global.bonus_radius*cos((phy_rotation+315)*pi/180);
y4=phy_position_y+global.bonus_radius*sin((phy_rotation+315)*pi/180);


calc=1;
}



if(fix_col==0)
{
fix1=physics_fixture_create();
physics_fixture_set_chain_shape(fix1,true);
physics_fixture_add_point(fix1,x1-phy_position_x,y1-phy_position_y);
physics_fixture_add_point(fix1,x2-phy_position_x,y2-phy_position_y);
physics_fixture_add_point(fix1,x3-phy_position_x,y3-phy_position_y);
physics_fixture_add_point(fix1,x4-phy_position_x,y4-phy_position_y);
physics_fixture_set_friction(fix1,0);
physics_fixture_set_kinematic(fix1);
physics_fixture_set_density(fix1,0);
physics_fixture_set_linear_damping(fix1,0);
physics_fixture_set_angular_damping(fix1,0);
physics_fixture_set_restitution(fix1,1);
physics_fixture_set_collision_group(fix1,0);
physics_fixture_bind(fix1,id);


fix_col=1;
}




iddx=noone;
iddx1=collision_line(x1,y1,x2,y2,control,true,true);
if(iddx1!=noone)if(iddx1.weapon_current==0)iddx=iddx1;
iddx2=collision_line(x2,y2,x3,y3,control,true,true);
if(iddx2!=noone)if(iddx2.weapon_current==0)iddx=iddx2;
iddx3=collision_line(x3,y3,x4,y4,control,true,true);
if(iddx3!=noone)if(iddx3.weapon_current==0)iddx=iddx3;
iddx4=collision_line(x4,y4,x1,y1,control,true,true);
if(iddx4!=noone)if(iddx4.weapon_current==0)iddx=iddx4;

if(iddx!=noone)
{
script_execute(offer_bonus,iddx,bid,by,bx);
instance_destroy();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
draw_text(phy_com_x-global.bonus_radius,phy_com_y-global.bonus_radius,string(bid));
draw_line_width(x1,y1,x2,y2,global.bonus_thick);
draw_line_width(x2,y2,x3,y3,global.bonus_thick);
draw_line_width(x3,y3,x4,y4,global.bonus_thick);
draw_line_width(x4,y4,x1,y1,global.bonus_thick);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>2,0</point>
    <point>2,2</point>
    <point>0,2</point>
  </PhysicsShapePoints>
</object>
